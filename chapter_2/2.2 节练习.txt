2.2.1 考虑下面的上下文无法文法：
S -> SS + | SS * | a

1）试说明如何使用该文法生成串 aa  + a*
2）试为这个串构造一棵语法分析书。
3）该文法生成的语言是什么？证明你的答案。

答：
1）SS* -> SS+ S * -> aa+a*
2）
               S
        |      |      |
        S      S      *
    |   |   |  |      |
    S   S   +  a      *
    |   |
    a   a
3）是一个由 {a, +, *} 组成的，以 a 开头的字符串
TODO: 如何证明？2.2.1

2.2.2 下面的各个文法生成什么语言？证明你的每一个答案。
1）S -> 0 S 1 | 01
2）S -> + S S | - S S | a
3) S -> S (S) S | e
4）S -> a S b S | b S a S | e
5）S -> a | S + S | S S | S * | ( S )

答:
1）01,0011,000111 ... 由0和1组成的字符串，0 与 1 的出现次数相同，且所有的 0 都在 1 前面，0 与 1 至少出现1次
2）由 {+,-,a} 组成的字符串，以 {+,-} 开头，以 a 结尾。a 至少出现 2 次。
3）由 {(,)} 组成的字符串，其中 {(,)} 成对出现
4) 由 {a, b} 组成的字符串，a 与 b 出现的次数相同。
5）一个简单的正则表达式文法，来自网络的答案？？
#TODO: 无法理解，我觉得问题写得不清楚。
#TODO: 如何证明？ 2.2.2

2.2.3 练习 2.2.2 中哪些文法具有二义性？
1）没有二义性
2）没有二义性
3）有二义性
()() <- S(S)S <- e(e)S <- e(e)S(S)S <- e(e)e(e)e <- ()()
()() <- S(S)S <- S(e)e <- S(S)S(e)e <- e(e)e(e)e <- ()()
4）有二义性
5）有二义性

2.2.4 为下面的语言构建无二义性的上下文无关的文法。证明你的文法都是正确的。
1）用后缀方式表示的算术表达式
答：
expr -> expr term + | expr term -
term -> term factor * | term factor /
factor -> digit | (expr)

简单版本
expr -> num num op | num

2）由逗号分隔开的左结合的标识符列表
答：
list -> list , id | id

3）由逗号分隔开的右结合的标识符列表
答：
list -> id, list | id

4）由整数、标识符、四个二目运算符 +、-、*、/构成的算术表达式
答：
expr -> expr + term | expr - trem
term -> term * factor | term / factor
factor -> id | digit | (expr)

2.2.5 
1）证明：用下面文法生成的所有二进制串的值都能被 3 整除。（提示：对语法分析树的节点树木使用数学归纳法。）
num -> 11 | 1001 | num 0 | num num
2）上面的文法是否能够生成所有能被 3 整除的二进制串？

答：
1）
11, 1001, 110, 10010, 1111, 111001, 100111, 10011001
3, 9, 6, 18, 15
都可以被 3 整除

证明
num -> 11 为 3
num -> 1001 为 9
num -> num0 为 num * 2
已知 11 或 1001 一定能够被 3 整除，假设为 x1 和 x2
那么 num -> num 0 生成的结果是 x1 * 2 或 x2 * 2 因为 x1 或 x2 能够被 3 整除，所以 x1 * 2 ，x2 * 2 也能够被 3 整除。
num -> num num
假设 n 为 后一个 num 的位数
则 num -> num num 为 x1 * 2n + x2 假设 x1 = 3x (x >= 1 且为整数) x2 = 3y (y >= 1 且为整数)
则 num -> num num 为 3x * 2n + 3y = 3(2xn + y) 可以被3 整除

结论：
以上文法产生的所有数字，都可以被 3 整除

2）
不能，以上文法不能产生 12

2.2.6 为罗马数字构建一个上下文无关的文法
#TODO: 暂时不做了 2.2.6，下次查一下罗马数字的组成再写。
#NOTE: 后面需要用到罗马数字的文法，必须要写了！！！

答：
【网络的答案】
罗马数字的构成
I V X L C D M
不考虑加横线乘以 1000 的算法
I, II, III | IV | V, VI, VII, VIII | IX

digit -> smallDigit | IV | V smallDigit | IX
smallDigit -> I | II | III | e

romanNum -> thousand hundred ten digit
thousand -> M | MM | MMM | e
hundred -> smallHundred | C D | D smallHundred | C M
smallHundred -> C | CC | CCC | e
ten -> smallTen | X L | L SmallTen | X C
smallTen -> X | XX | XXX | e
digit -> smallDigit | IV | V smallDigit | IX
smallDigit -> I | II | III | e

有一个问题。我可以测试出这个文法可以生成罗马数字
但是我如何确定这种文法生成的所有的字符串，都是合法的罗马数字？
二是，上下文无关的文法是不是其实并不需要有规则，比如，罗马数字的
左减右加等。文法只规定结构，并不决定意义。

【我的答案】
因为条件的限制，目前使用的所有符号的
I(1), V(5), X(10), L(50), C(100), D(500), M(1000)
根据罗马数字的规则，可以发现一些规律。

romanNumder -> basicThousand hundred ten digit
basicThousand -> M | MM | MMM | e
hundred -> basicHundred | CD | D | D basicHundred | CM |e
basicHundred -> C | CC | CCC
ten -> basicTen | XL | L | L basicTen | XC | e
basicTen -> X | XX | XXX
digit -> basicDigit | IV | V | V basicDigit | IX | e
basicDigit -> I | II | III 