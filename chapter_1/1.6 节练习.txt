1.6.1 对图 1-13a 中的块结构的 C 代码，支出付给 w、x、y 和 z 的值。

```c
int w, x, y, z;
int i = 4;
int j = 5;
{
    int j = 7;
    i = 6;
    w = i + j; // w = 13
}
x = i + j; // x = 11
{
    int i = 8;
    y = i + j; // y = 13
}
z = i + j; // z = 11
```
答：
w = 13, x = 11, y = 13, z = 11

1.6.2 对图 1-13b 中的代码重复练习 1.6.1

```c
int w, x, y, z;
int i = 3; int j = 4;
{
    int i = 5;
    w = i + j; // w = 9
}
x = i + j; // x = 7
{
    int j = 6;
    i = 7;
    y = i + j; // y = 13
}
z = i + j; // z = 11
```
w = 9, x = 7, y = 13, z = 11

1.6.3 对于图 1-14 中的块结构代码，假设使用常见的声明的静态作用域规则，给出其中 12 个声明的每一个的作用域。

```c
{/* 块 B1 */
    int w, x, y, z;
    {
        /* 块 B2 */ 
        int x, z;
        {
            /* 块 B3 */ 
            int w, x;
        }
    }
    {
        /* 块 B4 */ 
        int w, x;
        {
            /* 块 B5 */ 
            int y, z;
        }
    }
}
```
答：
w: B1, B2
x: B1
y: B1, B2, B3, B4
z: B1, B4

1.6.4  下面的 C 代码的打印结果是什么？

```c
#define a (x + 1)
int x = 2;
void b() {
    x = a;
    printf("%d\n", x);
}

void c() {
    int x = 1;
    printf("%d\n", a);
}

void main() {
    b();
    c();
}
```

答：
3
2